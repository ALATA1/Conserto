pipeline {
    agent any

    environment {
        PYTHON = 'C:\\Users\\ibrahima.alata\\AppData\\Local\\Programs\\Python\\Python313\\python.exe'
        RESULTS_DIR = 'Resultats'
        ALLURE_RESULTS_DIR = 'Resultats'
        ALLURE_REPORT_DIR = 'allure-report'
        TEAMS_WEBHOOK = 'https://outlook.office.com/webhook/xxx/IncomingWebhook/yyy/zzz' // <-- Remplace ici
    }

    parameters {
        string(name: 'EMAIL', defaultValue: 'ibrahima.alata@conserto.pro', description: 'Destinataire du rapport')
    }

    tools {
        allure 'Allure'
    }

    stages {
        stage('Installation des d√©pendances') {
            steps {
                echo 'Installation des librairies'
                bat "${env.PYTHON} -m pip install --upgrade pip"
                bat "${env.PYTHON} -m pip install -r requirements.txt"
            }
        }

        stage('Ex√©cution des tests') {
            steps {
                echo 'Lancement des tests'
                bat "${env.PYTHON} -m robot --listener allure_robotframework;allure-results Tests/TestSuites/Conserto"
            }
        }

        stage('G√©n√©ration du rapport Allure') {
            steps {
                echo 'G√©n√©ration du rapport Allure...'
                bat "C:\\ProgramData\\Jenkins\\.jenkins\\tools\\allure\\bin\\allure.bat generate ${env.ALLURE_RESULTS_DIR} -o ${env.ALLURE_REPORT_DIR} --clean"
            }
        }

        stage('Archivage des r√©sultats') {
            steps {
                echo 'Archivage des rapports et screenshots...'
                archiveArtifacts artifacts: "${env.RESULTS_DIR}/**"
                archiveArtifacts artifacts: "${env.ALLURE_REPORT_DIR}/**"
            }
        }
    }

    post {
        always {
            allure includeProperties: false, jdk: '', results: [[path: env.ALLURE_RESULTS_DIR]]
        }

        success {
            script {
                def getScreenshotLinks = {
                    def screenshotsDir = "${env.WORKSPACE}/${env.RESULTS_DIR}/Screenshot"
                    def links = []
                    if (fileExists(screenshotsDir)) {
                        def files = new File(screenshotsDir).listFiles()
                        if (files != null) {
                            files.findAll { it.isFile() && (it.name.endsWith('.png') || it.name.endsWith('.jpg')) }.each { file ->
                                def url = "${env.BUILD_URL}artifact/${env.RESULTS_DIR}/Screenshot/${file.name}"
                                links << "[${file.name}](${url})"
                            }
                        }
                    }
                    return links.join("<br>")
                }

                def screenshotsHtml = getScreenshotLinks()

                def message = """
                {
                  "@type": "MessageCard",
                  "@context": "http://schema.org/extensions",
                  "themeColor": "00FF00",
                  "summary": "Succ√®s du build",
                  "sections": [{
                    "activityTitle": "‚úÖ Succ√®s du build: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                    "activitySubtitle": "Jenkins CI",
                    "facts": [
                      {"name": "Projet", "value": "${env.JOB_NAME}"},
                      {"name": "Build", "value": "#${env.BUILD_NUMBER}"},
                      {"name": "Rapport HTML", "value": "[log.html](${env.BUILD_URL}artifact/${env.RESULTS_DIR}/log.html)"},
                      {"name": "Rapport Allure", "value": "[Allure Report](${env.BUILD_URL}artifact/${env.ALLURE_REPORT_DIR}/index.html)"},
                      {"name": "Screenshots", "value": "${screenshotsHtml}"}
                    ],
                    "markdown": true
                  }]
                }
                """

                writeFile file: 'teams_payload_success.json', text: message

                bat """
                curl -H "Content-Type: application/json" --data-binary @teams_payload_success.json "${env.TEAMS_WEBHOOK}"
                """
            }
        }

        failure {
            script {
                def message = """
                {
                  "@type": "MessageCard",
                  "@context": "http://schema.org/extensions",
                  "themeColor": "FF0000",
                  "summary": "√âchec du build",
                  "sections": [{
                    "activityTitle": "‚ùå √âchec du build: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                    "activitySubtitle": "Jenkins CI",
                    "facts": [
                      {"name": "Projet", "value": "${env.JOB_NAME}"},
                      {"name": "Build", "value": "#${env.BUILD_NUMBER}"},
                      {"name": "Logs", "value": "[Console Output](${env.BUILD_URL}console)"},
                      {"name": "Rapport HTML", "value": "[log.html](${env.BUILD_URL}artifact/${env.RESULTS_DIR}/log.html)"}
                    ],
                    "markdown": true
                  }]
                }
                """

                writeFile file: 'teams_payload_failure.json', text: message

                bat """
                curl -H "Content-Type: application/json" --data-binary @teams_payload_failure.json "${env.TEAMS_WEBHOOK}"
                """
            }

            emailext (
                subject: "‚ùå √âCHEC - Rapport de test ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                body: """
                    Bonjour,

                    Le build *${env.JOB_NAME}* #${env.BUILD_NUMBER} a √©chou√©.

                    üìé Voir logs ici : ${env.BUILD_URL}console  
                    üìé Rapport HTML : ${env.BUILD_URL}artifact/${env.RESULTS_DIR}/log.html

                    Cordialement,  
                    Jenkins
                """,
                to: "${params.EMAIL}",
                attachmentsPattern: "${env.RESULTS_DIR}/rapport_robot.zip"
            )
        }
    }
}
